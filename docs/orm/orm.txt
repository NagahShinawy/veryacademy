Student.objects.all()

1- objects: [managers]: django class that provides interface between db query operations and django model


##############################################################################################################

2- why ORM?

- write python code inseated of sql to [create, update, delete ]
- speed up application developemnt

##############################################################################################################

3- driver (adaptor program)

- database driver is a software that allows you to talk to your database from your application.
There are language specific drivers such as JDBC, ODBC, OLE DB
where the driver interface is implemented according to the language specifications
so your application could interact with the database according to predefined specs.

-enable you to open database connections and to interact with it by sending SQL or database commands then receiving results

- for python with PostgreSQL  ==> psycopg is a tool to connect python app with PostgreSQL db

##############################################################################################################
4- WHY NOT TO USE ORM ?

- security
- performance

https://stackoverflow.com/questions/194147/are-there-good-reasons-not-to-use-an-orm


##############################################################################################################
5- makemigrations vs migrate django

- makemigrations <app>: Create the migrations (generate the SQL commands).
- migrate: Run the migrations (execute the SQL commands).
- python manage.py sqlmigrate app_label migration_name
- python manage.py sqlmigrate core 0001

https://stackoverflow.com/questions/29980211/django-1-8-whats-the-difference-between-migrate-and-makemigrations


##############################################################################################################
6- basic operator |
# get all qs startswith "S" or qs startswith 'A'
students = Student.objects.filter(firstname__istartswith="S") | Student.objects.filter(firstname__startswith="A")

##############################################################################################################
7- exclude objs using not operator ~
# not operator ~. mean get all objs with firstname not sS
# get all but exclude objs startswith either s or S
way#1: students = Student.objects.filter(~Q(firstname__istartswith="s"))

way#2: exclude_s = Student.objects.exclude(firstname__istartswith="s")


##############################################################################################################
8- combine queries

https://stackoverflow.com/questions/431628/how-can-i-combine-two-or-more-querysets-in-a-django-view

###################################  values_list vs values ###########################################################################
9- diff between values_list and values

- values_list:  <QuerySet [('Nancy',), ('PHP',), ('Smith',), ]> ==> QS of tuples

students = Student.objects.values_list("firstname")
    print(
        students
    )  # <QuerySet [('Nancy',), ('PHP',), ('Smith',), ('Anna',), ('Ella',), ('sara',), ('Adam',), ('John',)]>


- values: <QuerySet [{'firstname': 'Nancy'}, {'firstname': 'PHP'}, {'firstname': 'Smith'}]> ==> QS of dictionaries

print(
        Student.objects.values("firstname")[:3]
)  # <QuerySet [{'firstname': 'Nancy'}, {'firstname': 'PHP'}, {'firstname': 'Smith'}]>


################################### unoin ###########################################################################

10- unoin: combine querysets together and remove duplicates


- get all distinct salaries and sort it desc

all_salaries = (
    Student.objects.values("salary")
    .union(Teacher.objects.values("salary"))
    .order_by("salary")
)
print(all_salaries)

- # union fields must have the same name and same datatype

# Error: UNION types numeric and date cannot be matched
qs = Student.objects.values("salary").union(Teacher.objects.values("dob"))
print(qs)


################################### 11- Using function tools ##############################################################

1- using function tools [Lower, Upper] with values_list

students = Student.objects.values_list(Lower("firstname"))
students = Student.objects.values_list(Upper("firstname"))


################################### 12- Model Inheritance ######################################

1- abctract: ABC base class to use moel fields in child class without create db model, just use fields

abstract class NOT INCLUDED IN THE DATABASE.
=====================
2- multi level inhertance [ one-one relationship]
TechLead is Developer [ create TechLead obj save to Developer model but obj will be saved as ref with new fields in Su model table]

- Base class and sub class included in the db with one2one relationship
- save the same data with means if you update from class , the same obj will be updated in the other class
=====================
3- Proxy model


=======================================================================================================================
# source : https://django-polymorphic.readthedocs.io/en/stable/quickstart.html
django-polymorphic